#!/bin/bash

if [[ "$1" == *p* && "$1" == *m* ]]; then
	rm ./print
	mv ../src/main.c ../src/main.c.orig
	cp ./printer/main.c ../src/main.c
	make --no-print-directory -C .. || exit
	mv ../minishell ../print
	mv ../print ./print
	rm ../src/main.c
	mv ../src/main.c.orig ../src/main.c
fi
if [[ "$1" == *m* ]]; then
	make --no-print-directory -C .. fclean
	make --no-print-directory -C .. || exit
fi
MINISHELL_PATH="../minishell"
PRINTER_PATH="./print"


# Run a specific test if the file name was specified
if [[ "$1" == -* ]]; then
	$($VAR)
elif [[ -n "$1" ]]; then
	test_lists=(
		$1
	)
else
	test_lists=(
		"builtins"
		"pipes"
		"redirects"
		"extras"
		"wildcards"
		"bonus"
		"parsing"
		"crazy"
		"errors"
		"syntax"
		"os_specific"
	)
fi

function	debug() {

	rm -rf ./outfiles/*
	rm -rf ./mini_outfiles/*

	echo -e "${YELLOW}\nPut prompt to debug below:${RESET}"
	read teste
	if [[ "$1" == *p* ]]; then
		PRINT=$(echo -e "$teste" | $PRINTER_PATH)
		echo -e "printed tree: ./result_tree.png"
	fi
	MINI_OUTPUT=$(echo -e "$teste" | $MINISHELL_PATH 2> /dev/null | $REMOVE_COLORS | grep -vF "$PROMPT" | $REMOVE_EXIT )
	MINI_OUTFILES=$(ls ./outfiles 2>/dev/null)
	TEST=$(echo -e "$teste" | $VALGRIND $MINISHELL_PATH 2> /dev/null | $REMOVE_COLORS)
	MINI_EXIT_CODE=$(echo -e "$MINISHELL_PATH\n$teste\necho \$?\nexit\n" | bash 2> /dev/null | $REMOVE_COLORS | grep -vF "$PROMPT" | $REMOVE_EXIT | tail -n 1)
	MINI_ERROR_MSG=$(trap "" PIPE && echo "$teste" | $MINISHELL_PATH 2>&1 > /dev/null | grep -o '[^:]*$' )
	MINI_LEAKS=$(sed '/^log$\|.*tmp\.log\|.*<inherited from parent>\|.*FILE DESCRIPTORS.*\|^==[0-9]\+==[[:space:]]*$\|.*\/dev\/ptmx/d' "$VALGRIND_TMP")
	echo -e "${BLUE}\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚ÄîStdout${RESET}"
	echo "$MINI_OUTPUT"

	echo -e "${BLUE}\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚ÄîStderr${RESET}"
	echo "$MINI_ERROR_MSG"

	echo -e "${BLUE}\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚ÄîOutfiles${RESET}"
	echo "$MINI_OUTFILES"

	echo -e "${BLUE}\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚ÄîExitcode${RESET}"
	echo "$MINI_EXIT_CODE"

	echo -e "${BLUE}\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚ÄîLeaks${RESET}"
	echo "$MINI_LEAKS"

	chmod 666 ./test_files/invalid_permission
	rm -rf ./outfiles
	rm -rf ./mini_outfiles
	rm -rf ./bash_outfiles
}

BOLD="\e[1m"
YELLOW="\033[0;33m"
GREY="\033[38;5;244m"
PURPLE="\033[0;35m"
BLUE="\033[0;36m"
RED="\e[0;31m"
END="\033[0m"
RED="\e[31m"
GREEN="\e[32m"
BLUE="\e[34m"
YELLOW="\033[0;33m"
RESET="\e[0m"

chmod 000 ./test_files/invalid_permission
if [ -d "./outfiles" ]; then
    rm -rf "./outfiles"
fi
if [ -d "./mini_outfiles" ]; then
    rm -rf "./mini_outfiles"
fi
if [ -d "./bash_outfiles" ]; then
    rm -rf "./bash_outfiles"
fi
mkdir ./outfiles
mkdir ./mini_outfiles
mkdir ./bash_outfiles

export EMPTY=
export BLANK="      "
export BLANKSTAR="   *   "
export STAR="*"
export AMBIGUOS="f1 f2 f3"

PROMPT=$(echo -e "\nexit\n" | $MINISHELL_PATH | head -n 1 | sed "s/\x1B\[[0-9;]\{1,\}[A-Za-z]//g" )
# Helper commands:
REMOVE_COLORS="sed s/\x1B\[[0-9;]\{1,\}[A-Za-z]//g"
REMOVE_EXIT="grep -v ^exit$"
VALGRIND_TMP=./manual_tests/tmp.log
if [ -d "$VALGRIND_TMP" ]; then
    rm -f "$VALGRIND_TMP"
fi
VALGRIND="valgrind -q --track-fds=yes --trace-children=yes --leak-check=full --show-leak-kinds=all --error-limit=no --suppressions=valgrind.supp --log-file=$VALGRIND_TMP"

if [[ "$1" == *d* ]]; then
	debug $1
	exit
fi

printf $BLUE
echo "üíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄ";
echo "                                                                                             ";
echo " ‚ñà‚ñà    ‚ñà‚ñà ‚ñà ‚ñà‚ñà    ‚ñà ‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà   ‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà     ‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà  ";
echo " ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà ‚ñà ‚ñà‚ñà‚ñà   ‚ñà ‚ñà ‚ñà     ‚ñà   ‚ñà ‚ñà     ‚ñà     ‚ñà         ‚ñà‚ñà   ‚ñà     ‚ñà       ‚ñà‚ñà   ‚ñà     ‚ñà   ‚ñà‚ñà ";
echo " ‚ñà ‚ñà‚ñà‚ñà‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñà  ‚ñà ‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà  ‚ñà     ‚ñà         ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà  ";
echo " ‚ñà  ‚ñà‚ñà  ‚ñà ‚ñà ‚ñà  ‚ñà‚ñà ‚ñà ‚ñà     ‚ñà ‚ñà   ‚ñà ‚ñà     ‚ñà     ‚ñà         ‚ñà‚ñà   ‚ñà         ‚ñà   ‚ñà‚ñà   ‚ñà     ‚ñà   ‚ñà‚ñà ";
echo " ‚ñà      ‚ñà ‚ñà ‚ñà   ‚ñà‚ñà‚ñà ‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà   ‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà     ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà   ‚ñà‚ñà ";
echo "                                                                                             ";
echo "üíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄüíÄ";
echo "                                                                                              ";


for testfile in ${test_lists[*]}; do

	printf $RED
	echo ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî $testfile

	while read teste; do
		((i++))

		rm -rf ./outfiles/*
		rm -rf ./mini_outfiles/*
		MINI_OUTPUT=$(echo -e "$teste" | $MINISHELL_PATH 2> /dev/null | $REMOVE_COLORS | grep -vF "$PROMPT" | $REMOVE_EXIT )
		MINI_OUTFILES=$(cp ./outfiles/* ./mini_outfiles &>/dev/null)
		TEST=$(echo -e "$teste" | $VALGRIND $MINISHELL_PATH 2> /dev/null | $REMOVE_COLORS)
		MINI_EXIT_CODE=$(echo -e "$MINISHELL_PATH\n$teste\necho \$?\nexit\n" | bash 2> /dev/null | $REMOVE_COLORS | grep -vF "$PROMPT" | $REMOVE_EXIT | tail -n 1)
		MINI_ERROR_MSG=$(trap "" PIPE && echo "$teste" | $MINISHELL_PATH 2>&1 > /dev/null | grep -o '[^:]*$' )
		MINI_LEAKS=$(sed '/.*\.log\|.*<inherited from parent>\|.*FILE DESCRIPTORS.*\|^==[0-9]\+==[[:space:]]*$\|.*\/dev\/ptmx/d' "$VALGRIND_TMP")

		rm -rf ./outfiles/*
		rm -rf ./bash_outfiles/*
		BASH_OUTPUT=$(echo -e "$teste" | bash 2> /dev/null)
		BASH_EXIT_CODE=$(echo $?)
		BASH_OUTFILES=$(cp ./outfiles/* ./bash_outfiles &>/dev/null)
		BASH_ERROR_MSG=$(trap "" PIPE && echo "$teste" | bash 2>&1 > /dev/null | grep -o '[^:]*$' | head -n1)

		OUTFILES_DIFF=$(diff --brief ./mini_outfiles ./bash_outfiles)

		printf $YELLOW
		printf "Test %3s: " $i
		if [[ "$MINI_OUTPUT" == "$BASH_OUTPUT" && "$MINI_EXIT_CODE" == "$BASH_EXIT_CODE" && -z "$OUTFILES_DIFF" ]]; then
			printf ‚úÖ
			((ok++))
			if [ "$MINI_ERROR_MSG" != "$BASH_ERROR_MSG" ]; then
				printf "‚ö†Ô∏è"
			fi
		else
			printf ‚ùå
		fi
		if [ "$MINI_LEAKS" ]; then
				printf "üíß"
		fi
		printf "$GREY $teste \n$END"
		if [ "$OUTFILES_DIFF" ]; then
			echo "$OUTFILES_DIFF"
			echo mini outfiles:
			cat ./mini_outfiles/*
			echo bash outfiles:
			cat ./bash_outfiles/*
		fi
		if [ "$MINI_OUTPUT" != "$BASH_OUTPUT" ]; then
			echo mini output = \($MINI_OUTPUT\)
			echo bash output = \($BASH_OUTPUT\)
		fi
		if [ "$MINI_EXIT_CODE" != "$BASH_EXIT_CODE" ]; then
			echo mini exit code = $MINI_EXIT_CODE
			echo bash exit code = $BASH_EXIT_CODE
		fi
		if [ "$MINI_ERROR_MSG" != "$BASH_ERROR_MSG" ]; then
			echo mini error = \($MINI_ERROR_MSG\)
			echo bash error = \($BASH_ERROR_MSG\)
		fi
	done < $testfile
done

chmod 666 ./test_files/invalid_permission
rm -rf ./outfiles
rm -rf ./mini_outfiles
rm -rf ./bash_outfiles
rm -f $VALGRIND_TMP

printf $PURPLE
printf $BOLD
echo   $ok/$i
printf $END

if [[ "$ok" == "$i" ]]; then
	echo "üòç üòç üòç"
	exit 0
else
	echo "‚ò†Ô∏è ‚ò†Ô∏è ‚ò†Ô∏è"
	exit 1
fi
